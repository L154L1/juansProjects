Chapter 5 - Class Design

Java supports single inheritance which means a class can inherit from only one direct parent class.
One exception to the single inheritance rule is a class can implement multiple interfaces.

(p237)
The public and default package level access modifier are the only access modifiers that apply to top-level classes. The private and protected modifiers only apply to inner classes (out of OCA scope)
Note : legal modifier for top level class are public/abstrac/final and default, static/private/protected are illegal for top level classes.

There can be at most only one public class or interface in a java file. Like classes, top-level interfaces can only be declared with public or default access modifiers.

(p238)
In Java, all classes inherit from a single class - java.lang.Object.  java.lang.Object is the only class that doesn't have any parent class.

In Java, the first statement of every constructor is either a call to another constructor within the same class using this(), or a call to a constructor in the direct parent class using super(). 

In a constructor, if we don't explicitly call parent constructor via super() keyword (the first statement is not a call to the parent constructor), Java compiler automatically inserts a call to the no-argument constructor super(). 

(p243) constructor rules
1. The first statement of every constructor is a call to another constructor, either within the same class using this(), or in the direct parent class using super().
2. super() or this() can only be the first statement.
3. If no super() call is declared in a constructor, Java will insert a no-argument super() as the first statement of the constructor.
4. If the parent doesn't have a no-argument constructor and the child doesn't define any constructors, the compiler will throw an error when trying to insert a default no-argument constructor with super() into the child class.
5. If the parent doesn't have a no-argument constructor, the compiler requires an explicit call to a parent constructor in each child constructor.

(p243) 
The parent constructor is always executed before the child constructor.

(p245) call inherited class members
'this' or 'super' keyword may both be used for methods or variables defined in the parent class, but only 'this' may be used for members defined in the current class. 

(p247) method overriding rules  (overriding applies to instance methods !!!)
1. The method in the child class must have the same signature as the method in the parent class.
2. The method in the child class must be as least as accessible or more accessible than the method in the parent class.
3. The method in the child class may not throw a checked exception that is new or broader than those thrown in the parent class method.
4. If the method returns a value, it must be the same or a subclass of the method in the parent class, known as covariant return types.

note : method overriding only occurs when the method in the parent class is public or protected (including default access). If the method is private, you are free to create a method with the same name in the child class without any rules. It's an independent method. It's not override method, just a new method in the child class.

(p252) hiding static methods - has the same rule 1 - 4 as overriding with a 5th rule :
5. The method defined in the child class must be marked as static if it is marked static in the parent class (method hiding). Likewise, the method must not be marked as static in the child class if it its not marked as static in the parent class (method overriding)

Note : hiding method is not a good practice in real coding. You should not reuse the name of a static method in your class if it is already used in the parent class.

- with hidden methods, the method used depends on where it is referenced.
- with overridden methods, the method used depends on the object type.


(q5) 
- static methods cannot be overridden, only hidden.
- private methods are always hidden.
- variables can only be hidden regardless of the access modifier (private or public/protected/default)

(p256) final methods
A method with the final keyword forbids a child class from overriding this method. This rule applies to both when you override and hide a method. You cannot hide a static method in a parent class when it is marked as final.

(p257) Java doesn't allow variables to be overridden but instead hidden, which means if you are referencing the variable from within the parent class, the variable defined in the parent class is used; if you are referencing the variable from within a child class, the variable defined in the child class is used.
These rules are the same regardless of instance variable or static variable.
(Note : in real coding practice, don't hide variables. It's bad coding practice)
Hiding variable only applies to public, protected or default variables. The child class wouldn't have access to private variables in the parent class to begin with. 

(p259, p265) abstract class, abstract method
An abstract class is a class marked with abstract keyword and cannot be instantiated.
An abstract method is a method marked with abstract keyword defined in an abstract class, for which no implementation is provided in the class in which it's declared.
- abstract class is not required to include any abstract methods.
- abstract method can only be in an abstract class.
- abstract class cannot be marked private, protected, or final ( any top level classes cannot be protected or private)
- abstract method cannot be marked private or final.
- when implementing abstract method in the child class, rules for overriding methods must be followed.
- abstract class becomes useful when it is extended by a concreted class.

(p262) concrete class
A concrete class is the first nonabstract class that extends an abstract class and is required to implement all inherited abstract methods.

(p267) 
- top-level interfaces are assumed to have public or default access. They are assumed abstract.
- interface cannot be marked as final.
- all non-default methods in an interface are assumed to have modifiers abstract and public. They cannot be marked as private, protected or final.
"assume" means it must be that way even if you don't add these keywords, the compiler will add them for you.

(p269)
An interface can be extended by another interface. An interface can extend multiple interfaces. 
A class cannot extend an interface.
Like a abstract class, the first concrete class that implements interfaces must implement all abstracted methods.
The only connection between a class and an interface is class implements interface syntax.

(p271) 
A class implements two interfaces that contain the same abstract methods.
- if same signature, implementing one will automatically implement the another. The interface methods are considered duplicate.
- if same name but different parameter list, there is no conflict. This is considered method overload.
- if two abstract methods have the same signature but different return type, they are considered conflict and cannot be extended by an interface or implemented by a class.
- all methods within a interface are assumed to be public.

(p273) interface variables
1. Interface variables are assumed to be public, static and final. Marking it as private or protected, or abstract will trigger compiler error.
2. The value of an interface variable must be set when it is declared since it is marked final.
As such, interface variables are essentially constant variables on the interface level. Since they are static, you can access them without an instance of the interface.

(p275) default methods
1. A default method may only be declared within an interface.
2. A default method must be marked with default keyword. If a method is marked as default, it must provide a method body.
3. A default method cannot be static, final or abstract, as it may be used or overriden by a class that implements the interface.
4. Like all methods in an interface, a default method is assumed to be public and will not compile if marked as private or protected.
Note : you cannot use default method to override any methods in java.lang.Object such as boolean equals(Object o). It will cause compile error.

(p276) when a interface extends another interface, it may :
- it may ignore the default method, in which case the default implementation for the method will be used.
- it may override the definition of the default method using the standard rules of method overriding. 
- it may redeclare the method as abstract requiring classes that implement the new interface to explicitly provide the method body.

(p278) Having a class (including abstract class) that implements or inherits two duplicate default methods (same signature) forces the class to implement a new version of the method, or the code will not compile.

(p278) static interface methods
A static method defined in an interface is not inherited in any classes that implement the interface.
1. like all interface methods, a static method is assumed to be public in an interface.
2. To reference the static method in an interface, the name of the interface must be used. Even in the class that implements the interface. (instance variable can be inherited by the class that implements the interface meaning class name is not required when referencing it)
3. a class that implements two interfaces containing static methods with the same signature will still compile because the static methods are not inherited by the subclass and must be accessed with a reference to the interface name.

(p279) Polymorphism ( In short, an object can be referenced by its own type, or its superclass or an interface it implements. )
The property of an object to take on many different forms - a Java object can be accessed using a reference of the same type as the object, a reference that is a superclass of the object, or a reference that is an interface the object implements. A cast is not required if the object is being reassigned to a super type or interface of the object.
Once the object has been assigned to a new reference type, only the methods and variables available to that reference type are callable on the object.

(p281) Object vs. Reference
1. The type of the object determines which properties exist within the object in memory.
2. The type of the reference to the object determines which methods and variables are accessible to the Java program.

(p282) casting objects
1. Casting an object from a subclass to superclass does not require explicit cast.
2. Casting an object from a superclass to subclass requires explicit cast.
3. The compiler will not allow casts to unrelated types.
4. Even when the code compiles without issue, an exception will be thrown at runtime if the object being cast is not actually an instance of that class.

(p284) virtual methods
In Java, all non-final, non-static, non-private methods are considered virtual methods, since any of them can be overridden at runtime.
What makes a virtual method special in Java is you call a method on a object that overrides a method, you get the overriden method, even if the call to the method is on a prarent reference or within the parent class.

(p285) polymorphic parameters
One of uses of polymorphism is : define an method that takes an instance of an interface or superclass as a parameter, so any class that implements the interface can be passed as parameter to the method.