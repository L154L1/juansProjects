Chapter 6 - Exceptions


(p302) categories of exception
java.lang.Object <- java.lang.Throwable <- java.lang.Exception, java.lang.Error
java.lang.Exception <- java.lang.RuntimeException

runtime exception = unchecked exception

Runtime exception - defined as RuntimeException class or its subclasses. Program can catch it but not required. 

Checked exception - includes Exception and all subclasses that do not extend RuntimeException. Checked exceptions tend to be more anticipated, i.e., trying to read a file that doesn't exist. For checked exceptions, Java requires the code to either handle them or declare them in the method declaration.

Error - subclass of Error. Program shouldn't catch it.

(p308) A try statement must have catch and/or finally. Having both is fine. Having neither is a problem. Catch is not required if finally is present.

(p309) There is one exception to "the finally block always runs after the catch block" rule. Java defines a method you can call - System.exit(0); . When it is called in try or catch block, finally doesn't run.

(p314) Runtime Exceptions - Extends RuntimeException. They don't have to be handled or declared. Can be thrown by JVM or programmer.
ArithmeticException - thrown by JVM when code attempts to divide by zero.
ArrayIndexOutOfBoundsException - thrown by JVM when an illegal array index is used.
ClassCastException - thrown by JVM when trying to cast an object to a subclass of which it is not an instance.
NullPointerException - thrown by JVM when there is a null reference when an object is required.
IllegalArgumentException - thrown by programmer to indicate that a method has been passed an illegal argument.
NumberFormatException - thrown by programmer when trying to convert a string to a number but the string doesn't have an appropriate format. NumberFormatException is a subclass of IllegalArgumentException.

SecurityException is runtime exception.

(p317) checked exceptions
They extends Exception but are not RuntimeException. Checked exceptions must be handled or declared. Common checked exceptions :
FileNotFoundException - thrown programmatically when code tries to reference a file that doesn't exist. It's a subclass of IOException.
IOException - thrown programmatically when there's a problem reading or writing a file.

(p317) Errors
Extend Error class. Thrown by JVM and should not be handled or declared. Common errors :
ExceptionInInitializerError	- thrown by JVM when a static initializer throws an exception and doesn't handle it.
StackOverflowError		thrown by JVM. Usually it happens when a method calls itself.
NoClassDefFoundError  (Note : ClassNotFoundException is checked exception)

(p319) When a method throws a checked exception, the caller method must catch it or declare it for the caller to deal with.
If a method doesn't throw any checked method, the caller cannot catch any checked exception when calling it - unreachable code. But the caller can declare any exceptions.

If method is declared to throw a checked exception then calling method should catch or declare that exception.

(p320) when overriding method in a subclass, the subclass is only allowed to declare fewer checked exceptions than the superclass or interface. This rule applies only to checked exceptions. Methods are free to declare new runtime exceptions in a subclass. The reason is the declaration is redundant because methods are free to throw any runtime exceptions without mentioning them in the method declaration.

(p323) if both catch and finally throw an exception, the one from finally gets thrown.

(p324) throw vs throws
When you actually want to throw an exception in code, use throw. the throws keyword is used in method declaration.

(p325 - q1) Legally, you can handle java.lang.Error subclasses, but it's not a good idea. (Errors are allowed to be handled or declared)

(p326 - q5) 
- thrown by JVM :
ArrayIndexOutOfBoundsException
ExceptionInInitializerError
NullPointerException
- thrown programmatically :
java.io.IOException (thrown by many methods in java.io package.
NumberFormatException (thrown programmatically by the wrapper classes of java.lang)

(p330 - q13) 
Classes listed in the throws part of a method declaration must extend java.lang.throwable. This includes Error, Exception, and RuntimeException.
Any Java type, including Exception can be declared as the return type of a method.

(p330 - q14)
A method that declares an exception isn't required to throw one.
Runtime exceptions can be thrown in any method without need to declare.
If a checked exception is declared, a broader checked exception is not allowed.

(p331 - q18)
Checked exceptions, Runtime exceptions, and Errors are all allowed to be handled or declared. 
Only checked exceptions are required to be handled or declared.
It's not good idea to handle Errors.


